"""数据结构"""
# 列表
# python中列表是可变的，这是它区别于字符串和元组的最重要的特点，一句话概括即：列表可以修改，而字符串和元组不能
#

# 将列表当做堆栈使用
# 列表方法使得列表可以很方便的作为一个堆栈来使用，堆栈作为特定的数据结构，最先进入的元素最后一个被释放（后进先出）
# 用append()方法可以把一个元素添加到堆栈顶，用不指定索引的pop()方法可以把一个元素从堆栈顶释放出来，例如：
stack = [3, 4, 5]
stack.append(6)
stack.pop()

# 将列表当作队列使用
# 也可以把列表当做队列用，只是在队列里第一加入的元素，第一个取出来，但是拿列表用作这样的目的效率不高，
# 在列表的最后添加或者弹出元素速度快，然而在列表里插入或者从头部弹出速度却不快（因为所有其他的元素都得一个一个的移动）

# 列表推导式
# 列表推导式提供了从序列创建列表的简单途径，通常应用程序将一些操作应用于某个序列的每个元素，
# 用其获得的结果作为生成新列表的元素，或者根据确定的判定条件创建子序列
# 每个列表推导式都在for之后跟一个表达式，然后有零到多个for或if子句，返回结果是一个根据表达从其后的for和if上下文环境中生成出来的列表
# 如果希望表达式推导出一个元组，就必须使用括号

# 嵌套列表解析

# del语句
# 使用del语句可以从一个列表中依索引而不是值来删除一个元素，这与使用pop()返回一个值不同，可以del语句从列表中删除一个切割，或清空整个列表

# 元组和序列

# 集合
# 集合是一个无序不重复元素的集，基本功能包括关系测试和消除重复元素
# 可以用大括号（{}）创建集合，注意：如果创建一个空集合，你必须用set()而不是{}，后者创建一个空字典

# 字典
# 另一个非常有用的python内建数据类型是字典
# 序列是以连续的整数为索引，与此不同的是，字典以关键字为索引，关键字可以是任意不可变类型，通常用字符串或数值
# 理解字典的最佳方式是把它看做无序的键=>值对集合，在同一个字典之内，关键字必须是互不相同
# 一对大括号创建一个空的字典：{}

# 遍历技巧